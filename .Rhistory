c(pca, cluster)
}
pcaContribution <- function(pca){
load <- with(pca, unclass(loadings))
aload <- abs(load)
a <- sweep(aload, 2, colSums(aload), "/")
a <- as.data.frame(a[, 1 : min(4, length(a[1,]))])
a[order(-a$Comp.1), ]
}
tryClust <- function(data, method, cut){
clusters <- hclust(dist(scale(data)), method = method);
plot(clusters);
clustercut <- cutree(clusters, cut);
table(clustercut)
}
vs_Afat <- function(data, col) {
data[[col]] <- as.factor(data[[col]])
p <-
ggplot(data = data) +
geom_boxplot(mapping = aes_string(x = col, y = 'NUT_AFAT'))
print(p)
}
vs_Class <- function(colName){
ggplot(data = classDiet) +
geom_boxplot(mapping = aes_string(x = 'classification', y = colName))
}
addClassCol <- function(data, colName, critList, transformed = FALSE){
low <- TRUE
allNorm <- TRUE
for(i in critList){
low <- low & data[[i]] <= ifelse(transformed, .1, 2)
allNorm <- allNorm & data[[i]] <= ifelse(transformed, 2.5 , 7)
}
data[[colName]] <- ifelse(low, 'Low', ifelse(allNorm, 'Normal', 'High'))
data
}
#this function only takes the raw framingham ffq data as an argument
transformFFQ <- function(data){
ffqData <- data[, 42:174]
ffqData <- unfactor(ffqData)
blank <- c('dairypt', 'fruitpt', 'vegpt', 'eggspt', 'meatspt', 'breadspt', 'bevpt', 'sweetspt', 'otherspt', 'fatfpt',
'fatbpt', 'oilpt', 'mpt', 'sugpt', 'cerpt', 'fl', 'cer', 'oil')
ffqData <- ffqData[ , -which(names(ffqData) %in% blank)]
#print(ffqData$tofu)
ffqData[ffqData == 1] <- 1/60
ffqData[ffqData == 2] <- 1/15
ffqData[ffqData == 3] <- 1/7
ffqData[ffqData == 4] <- 3/7
ffqData[ffqData == 5] <- 5.5/7
ffqData[ffqData == 6] <- 1
ffqData[ffqData == 7] <- 2.5
ffqData[ffqData == 8] <- 4.5
ffqData[ffqData == 9] <- 7
ffqData[ffqData == 10] <- NA
#print(ffqData$tofu)
ffqData$ID = data$id
ffqData
}
numClust <- 4
pcauEicOnly4c <- kmeansAndPca(md[eicOnly], FALSE, numClust) #WOAH
pcauEicOnly4c <- kmeansAndPca(md[eicOnly], FALSE, numClust) #WOAH
pcauEicOnly4c <- kmeansAndPca(md[eicOnly], FALSE, numClust) #WOAH
pcauEicOnly4c <- kmeansAndPca(md[eicOnly], FALSE, numClust) #WOAH
superheat(bCoeffs)
for(i in eicOnly - start_eic + 1){
med <- 0
high <- 0
tot <- 0
for(j in 1:nrow(cors)){
if(cors[j, i] > .2){
med <- med + 1
}
if(cors[j, i] > .3){
high <- high + 1
}
}
eicCors[nrow(eicCors) + 1,] <- c(colnames(cors)[i], med, high)
}
start_eic <- grep('mzid_231.176117_1.8182', colnames(md))
end_eic <- grep('mzid_395.241335_2.6439', colnames(md))
start_ffq <- grep('skim', colnames(md))
end_ffq <- grep('S_SHAKE', colnames(md))
eicOnly <- start_eic:end_eic
foodOnly <- start_ffq:end_ffq
pairCors = numeric()
ct <- 1
cors <- setNames(data.frame(matrix(ncol = length(eicOnly), nrow = length(foodOnly))), colnames(md)[eicOnly])
cors <- mutate(cors, food = '', corTotal = 0, numHigh = 0)
for(i in eicOnly){
for(j in foodOnly){
cors[j - start_ffq + 1, 'food'] <- colnames(md)[j]
temp <- dplyr::select(md, i, j)
temp <- filter(temp, complete.cases(temp))
cors[j - start_ffq + 1, i - start_eic + 1] <- pairCors[ct] <- round(cor(temp[1], temp[2]), digits = 3)
if(abs(pairCors[ct]) > .2){
print(paste('logt', colnames(temp)[1], 'and', colnames(temp)[2], 'are (c, r) (', i, ',', j, ') and have correlation', pairCors[ct], sep = ' '))
}
ct <- ct + 1
}
}
orderedCors <- pairCors[order(-abs(pairCors))]
head(orderedCors)
View(orderedCors)
cors$corTotal <- rowSums(abs(cors[1:grep('food', colnames(cors))-1]))
cors$numMed <- rowSums(ifelse( abs((cors[1:grep('food', colnames(cors))-1])) > .2, 1, 0))
cors$numHigh <- rowSums(ifelse( abs((cors[1:grep('food', colnames(cors))-1])) > .3, 1, 0))
cors <- cors[order(-cors$numHigh, -cors$numMed), ]
head(select(cors, food, numMed, numHigh))
head(dplyr::select(cors, food, numMed, numHigh))
eicCors <- setNames(data.frame(matrix(ncol = 3, nrow = 0)), c('Eicosanoid', 'NumMed', 'NumHigh'))
for(i in eicOnly - start_eic + 1){
med <- 0
high <- 0
tot <- 0
for(j in 1:nrow(cors)){
if(cors[j, i] > .2){
med <- med + 1
}
if(cors[j, i] > .3){
high <- high + 1
}
}
eicCors[nrow(eicCors) + 1,] <- c(colnames(cors)[i], med, high)
}
eicCors <- eicCors[order(-strtoi(eicCors$NumHigh), -strtoi(eicCors$NumMed)), ]
head(eicCors)
fullCor$estimate[111, 639]
fullCor <- pcor(md[datCols], method = 'spearman')
fullCor$estimate[111, 639]
fullCor$estimate[639, 111]
colnames(fullCor$estimate)[111]
colnames(fullCor$estimate)[110]
colnames(fullCor$estimate)[109]
colnames(fullCor$estimate)[100]
colnames(fullCor$estimate)[104]
colnames(fullCor$estimate)[103]
colnames(fullCor$estimate)
colnames(fullCor$estimate)[621]
fullCor$estimate[94, 621]
fullCor$estimate[104, 621]
colnames(fullCor$estimate)[104]
fullCor <- cor(md[datCols], method = 'spearman')
fullCor$estimate[94, 621]
fullCor[94, 621]
colnames(fullCor$estimate)[621]
col2 <- c(
"#67001F",
"#B2182B",
"#D6604D",
"#F4A582",
"#FDDBC7",
"#FFFFFF",
"#D1E5F0",
"#92C5DE",
"#4393C3",
"#2166AC",
"#053061"
)
corrplot(fullCor, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200)))
?pdf
pdf('file_location.pdf', width = 7, height = 7)
corrplot(fullCor, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200)))
dev.off()
dir.create('plots')
adjusted_correlations <-
matrix(nrow = ncol(md[datCols]), ncol = ncol(md[datCols]))
rownames(adjusted_correlations) <- colnames(adjusted_correlations) <- names(md[datCols])
for (rix in 1:(nrow(adjusted_correlations) - 1)) {
t1_r <- Sys.time()
for (cix in (rix + 1):nrow(adjusted_correlations)) {
t1_c = Sys.time()
mzid_r <- rownames(adjusted_correlations)[rix]
mzid_c <- colnames(adjusted_correlations)[cix]
# from https://en.wikipedia.org/wiki/Partial_correlation#Using_linear_regression
x <- md[datCols][[mzid_r]]
y <- md[datCols][[mzid_c]]
z <- fhs$plate
lm_xz <- lm(x ~ z)
lm_yz <- lm(y ~ z)
residuals_xz <- residuals(lm_xz)
residuals_yz <- residuals(lm_yz)
pcor <- cor(residuals_xz, residuals_yz)
adjusted_correlations[rix, cix] <- pcor
t2_c = Sys.time()
# print(glue::glue('The rix is {rix} the cix is {cix} and the pcor is {pcor} and it took {t2_c-t1_c} to run'))
t2_c = Sys.time()
}
t2_r = Sys.time()
print(glue::glue('It took {t2_r - t1_r} to run that row! {rix} row(s) down {nrow(adjusted_correlations) - rix} to go!'))
}
adjusted_correlations <-
matrix(nrow = ncol(md[datCols]), ncol = ncol(md[datCols]))
rownames(adjusted_correlations) <- colnames(adjusted_correlations) <- names(md[datCols])
for (rix in 1:(nrow(adjusted_correlations) - 1)) {
t1_r <- Sys.time()
for (cix in (rix + 1):nrow(adjusted_correlations)) {
t1_c = Sys.time()
mzid_r <- rownames(adjusted_correlations)[rix]
mzid_c <- colnames(adjusted_correlations)[cix]
# from https://en.wikipedia.org/wiki/Partial_correlation#Using_linear_regression
x <- md[datCols][[mzid_r]]
y <- md[datCols][[mzid_c]]
z <- md$plate
lm_xz <- lm(x ~ z)
lm_yz <- lm(y ~ z)
residuals_xz <- residuals(lm_xz)
residuals_yz <- residuals(lm_yz)
pcor <- cor(residuals_xz, residuals_yz)
adjusted_correlations[rix, cix] <- pcor
t2_c = Sys.time()
# print(glue::glue('The rix is {rix} the cix is {cix} and the pcor is {pcor} and it took {t2_c-t1_c} to run'))
t2_c = Sys.time()
}
t2_r = Sys.time()
print(glue::glue('It took {t2_r - t1_r} to run that row! {rix} row(s) down {nrow(adjusted_correlations) - rix} to go!'))
}
head(adjusted_correlations)
corrplot(adjusted_correlations, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200)))
corrplot(fullCor, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200)))
corrplot(adjusted_correlations, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200)))
setwd('/Users/krao/Documents/BDC/2018-clustering')
pdf('plots/heat.pdf', width = 7, height = 7)
setwd('/Users/krao/Documents/BDC/2018-clustering')
pdf('plots/heat.pdf', width = 7, height = 7)
pdf('plots/heat.pdf', width = 7, height = 7)
corrplot(fullCor, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200)))
dev.off()
corrplot(adjusted_correlations, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200)))
head(adjusted_correlations)
View(adjusted_correlations)
adjusted_correlations <-
matrix(nrow = ncol(md[datCols]), ncol = ncol(md[datCols]))
adjusted_correlations[1, 1] <- 1
rownames(adjusted_correlations) <- colnames(adjusted_correlations) <- names(md[datCols])
for (rix in 1:(nrow(adjusted_correlations) - 1)) {
t1_r <- Sys.time()
adjusted_correlations[rix, rix] <- 1
for (cix in (rix + 1):nrow(adjusted_correlations)) {
t1_c = Sys.time()
mzid_r <- rownames(adjusted_correlations)[rix]
mzid_c <- colnames(adjusted_correlations)[cix]
# from https://en.wikipedia.org/wiki/Partial_correlation#Using_linear_regression
x <- md[datCols][[mzid_r]]
y <- md[datCols][[mzid_c]]
z <- md$plate
lm_xz <- lm(x ~ z)
lm_yz <- lm(y ~ z)
residuals_xz <- residuals(lm_xz)
residuals_yz <- residuals(lm_yz)
pcor <- cor(residuals_xz, residuals_yz)
adjusted_correlations[rix, cix] <- adjusted_correlations[cix, rix] <- pcor
t2_c = Sys.time()
# print(glue::glue('The rix is {rix} the cix is {cix} and the pcor is {pcor} and it took {t2_c-t1_c} to run'))
t2_c = Sys.time()
}
t2_r = Sys.time()
print(glue::glue('It took {t2_r - t1_r} to run that row! {rix} row(s) down {nrow(adjusted_correlations) - rix} to go!'))
}
skrrrahh(16)
View(adjusted_correlations)
corrplot(adjusted_correlations, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200)))
dev.off()
setwd('/Users/krao/Documents/BDC/2018-clustering')
pdf('plots/heat.pdf', width = 7, height = 7)
a <- corrplot(fullCor, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200))); a
b <- corrplot(adjusted_correlations, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200))); b
dev.off()
grid.arrange(a, b, ncol = 2)
pdf('plots/heat.pdf', width = 7, height = 7)
corrplot(fullCor, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200)))
corrplot(adjusted_correlations, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200)))
dev.off()
adjusted_correlations <-
matrix(nrow = ncol(md[datCols]), ncol = ncol(md[datCols]))
adjusted_correlations[1, 1] <- 1
rownames(adjusted_correlations) <- colnames(adjusted_correlations) <- names(md[datCols])
for (rix in 1:(nrow(adjusted_correlations) - 1)) {
t1_r <- Sys.time()
adjusted_correlations[rix, rix] <- 1
for (cix in (rix + 1):nrow(adjusted_correlations)) {
t1_c = Sys.time()
mzid_r <- rownames(adjusted_correlations)[rix]
mzid_c <- colnames(adjusted_correlations)[cix]
# from https://en.wikipedia.org/wiki/Partial_correlation#Using_linear_regression
x <- md[datCols][[mzid_r]]
y <- md[datCols][[mzid_c]]
plCol <- md$plate
ageCol <- md$AGE8
sexCol <- md$SEX
bmiCol <- md$BMI8
bpCol <- md$SBP8
smkCol <- md$CURRSMK8
diabCol <- md$curr_diab8
tcCol <- md$TC8
lm_x <- lm(x ~ plCol + ageCol + sexCol + bmiCol + bpCol + smkCol + diabCol + tcCol)
lm_y <- lm(y ~ plCol + ageCol + sexCol + bmiCol + bpCol + smkCol + diabCol + tcCol)
residuals_x <- residuals(lm_x)
residuals_y <- residuals(lm_y)
pcor <- cor(residuals_x, residuals_y)
adjusted_correlations[rix, cix] <- adjusted_correlations[cix, rix] <- pcor
t2_c = Sys.time()
# print(glue::glue('The rix is {rix} the cix is {cix} and the pcor is {pcor} and it took {t2_c-t1_c} to run'))
t2_c = Sys.time()
}
t2_r = Sys.time()
print(glue::glue('It took {t2_r - t1_r} to run that row! {rix} row(s) down {nrow(adjusted_correlations) - rix} to go!'))
}
corrplot(adjusted_correlations, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200)))
pdf('plots/heat.pdf', width = 7, height = 7)
corrplot(fullCor, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200)))
corrplot(adjusted_correlations, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200)))
dev.off()
?cor
adjusted_correlations_spearman <-
matrix(nrow = ncol(md[datCols]), ncol = ncol(md[datCols]))
adjusted_correlations_spearman[1, 1] <- 1
rownames(adjusted_correlations_spearman) <- colnames(adjusted_correlations_spearman) <- names(md[datCols])
for (rix in 1:(nrow(adjusted_correlations_spearman) - 1)) {
t1_r <- Sys.time()
adjusted_correlations_spearman[rix, rix] <- 1
for (cix in (rix + 1):nrow(adjusted_correlations_spearman)) {
t1_c = Sys.time()
mzid_r <- rownames(adjusted_correlations_spearman)[rix]
mzid_c <- colnames(adjusted_correlations_spearman)[cix]
# from https://en.wikipedia.org/wiki/Partial_correlation#Using_linear_regression
x <- md[datCols][[mzid_r]]
y <- md[datCols][[mzid_c]]
plCol <- md$plate
ageCol <- md$AGE8
sexCol <- md$SEX
bmiCol <- md$BMI8
bpCol <- md$SBP8
smkCol <- md$CURRSMK8
diabCol <- md$curr_diab8
tcCol <- md$TC8
lm_x <- lm(x ~ plCol + ageCol + sexCol + bmiCol + bpCol + smkCol + diabCol + tcCol)
lm_y <- lm(y ~ plCol + ageCol + sexCol + bmiCol + bpCol + smkCol + diabCol + tcCol)
residuals_x <- residuals(lm_x)
residuals_y <- residuals(lm_y)
pcor <- cor(residuals_x, residuals_y, method = 'spearman')
adjusted_correlations_spearman[rix, cix] <- adjusted_correlations_spearman[cix, rix] <- pcor
t2_c = Sys.time()
# print(glue::glue('The rix is {rix} the cix is {cix} and the pcor is {pcor} and it took {t2_c-t1_c} to run'))
t2_c = Sys.time()
}
t2_r = Sys.time()
print(glue::glue('It took {t2_r - t1_r} to run that row! {rix} row(s) down {nrow(adjusted_correlations_spearman) - rix} to go!'))
}
corrplot(adjusted_correlations_spearman, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200)))
pdf('plots/heat.pdf', width = 7, height = 7)
corrplot(fullCor, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200)))
corrplot(adjusted_correlations, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200)))
corrplot(adjusted_correlations_spearman, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200)))
dev.off()
corrplot(fullCor, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200)))
start_eic <- grep('mzid_231.176117_1.8182', colnames(md))
end_eic <- grep('mzid_395.241335_2.6439', colnames(md))
start_ffq <- grep('skim', colnames(md))
end_ffq <- grep('S_SHAKE', colnames(md))
eicOnly <- start_eic:end_eic
dim(bCoeffs)
datCols
eicOnly
foodOnly
corrplot(bCoeffs, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200)))
?dimnames
?dimnames(bCoeffs)
dimnames(bCoeffs)
dimnames(adjusted_correlations_spearman)
?scale
corrplot(bCoeffs, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200)))
bMat <- as.matrix(bCoeffs)
corrplot(bMat, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200)))
adjusted_correlations <-
matrix(nrow = nrow(md[datCols]), ncol = ncol(md[datCols]))
adjusted_correlations <-
matrix(nrow = nrow(md[datCols]), ncol = ncol(md[datCols]))
adjusted_correlations[1, 1] <- 1
adjusted_correlations_spearman <-
matrix(nrow = nrow(md[datCols]), ncol = ncol(md[datCols]))
adjusted_correlations_spearman[1, 1] <- 1
rownames(adjusted_correlations_spearman) <- colnames(adjusted_correlations_spearman) <- names(md[datCols])
adjusted_correlations_spearman <-
matrix(nrow = ncol(md[foodOnly]), ncol = ncol(md[eicOnly]))
adjusted_correlations_spearman[1, 1] <- 1
rownames(adjusted_correlations_spearman) <- names(md[foodOnly])
colnames(adjusted_correlations_spearman) <- names(md[eicOnly])
for (rix in 1:(nrow(adjusted_correlations_spearman) - 1)) {
t1_r <- Sys.time()
adjusted_correlations_spearman[rix, rix] <- 1
for (cix in (rix + 1):nrow(adjusted_correlations_spearman)) {
t1_c = Sys.time()
foodName <- rownames(adjusted_correlations_spearman)[rix]
eicName <- colnames(adjusted_correlations_spearman)[cix]
# from https://en.wikipedia.org/wiki/Partial_correlation#Using_linear_regression
x <- md[datCols][[foodName]]
y <- md[datCols][[eicName]]
plCol <- md$plate
ageCol <- md$AGE8
sexCol <- md$SEX
bmiCol <- md$BMI8
bpCol <- md$SBP8
smkCol <- md$CURRSMK8
diabCol <- md$curr_diab8
tcCol <- md$TC8
lm_x <- lm(x ~ plCol + ageCol + sexCol + bmiCol + bpCol + smkCol + diabCol + tcCol)
lm_y <- lm(y ~ plCol + ageCol + sexCol + bmiCol + bpCol + smkCol + diabCol + tcCol)
residuals_x <- residuals(lm_x)
residuals_y <- residuals(lm_y)
pcor <- cor(residuals_x, residuals_y, method = 'spearman')
adjusted_correlations_spearman[rix, cix] <- adjusted_correlations_spearman[cix, rix] <- pcor
t2_c = Sys.time()
# print(glue::glue('The rix is {rix} the cix is {cix} and the pcor is {pcor} and it took {t2_c-t1_c} to run'))
t2_c = Sys.time()
}
t2_r = Sys.time()
print(glue::glue('It took {t2_r - t1_r} to run that row! {rix} row(s) down {nrow(adjusted_correlations_spearman) - rix} to go!'))
}
corrplot(adjusted_correlations_spearman, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200)))
adjusted_correlations_spearman <-
matrix(nrow = ncol(md[foodOnly]), ncol = ncol(md[eicOnly]))
adjusted_correlations_spearman[1, 1] <- 1
rownames(adjusted_correlations_spearman) <- names(md[foodOnly])
colnames(adjusted_correlations_spearman) <- names(md[eicOnly])
for (rix in 1:(nrow(adjusted_correlations_spearman) - 1)) {
t1_r <- Sys.time()
for (cix in (rix + 1):nrow(adjusted_correlations_spearman)) {
t1_c = Sys.time()
foodName <- rownames(adjusted_correlations_spearman)[rix]
eicName <- colnames(adjusted_correlations_spearman)[cix]
# from https://en.wikipedia.org/wiki/Partial_correlation#Using_linear_regression
x <- md[datCols][[foodName]]
y <- md[datCols][[eicName]]
plCol <- md$plate
ageCol <- md$AGE8
sexCol <- md$SEX
bmiCol <- md$BMI8
bpCol <- md$SBP8
smkCol <- md$CURRSMK8
diabCol <- md$curr_diab8
tcCol <- md$TC8
lm_x <- lm(x ~ plCol + ageCol + sexCol + bmiCol + bpCol + smkCol + diabCol + tcCol)
lm_y <- lm(y ~ plCol + ageCol + sexCol + bmiCol + bpCol + smkCol + diabCol + tcCol)
residuals_x <- residuals(lm_x)
residuals_y <- residuals(lm_y)
pcor <- cor(residuals_x, residuals_y, method = 'spearman')
adjusted_correlations_spearman[rix, cix] <- adjusted_correlations_spearman[cix, rix] <- pcor
t2_c = Sys.time()
# print(glue::glue('The rix is {rix} the cix is {cix} and the pcor is {pcor} and it took {t2_c-t1_c} to run'))
t2_c = Sys.time()
}
t2_r = Sys.time()
print(glue::glue('It took {t2_r - t1_r} to run that row! {rix} row(s) down {nrow(adjusted_correlations_spearman) - rix} to go!'))
}
corrplot(adjusted_correlations_spearman, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200)))
bCoeffs <- matrix(ncol = length(eicOnly), nrow = length(foodOnly))
posi <- posj <- 1
for(i in eicOnly){
for(j in foodOnly){
#bCoeffs[j - start_ffq + 1, 'food'] <- colnames(md)[j]
sformula <- paste(colnames(md)[i], '~', colnames(md)[j], '+ AGE8 + SEX + BMI8 + SBP8 + CURRSMK8 + curr_diab8 + TC8') #not currently adjusting for plate because it behaves strangely
bCoeffs[posj, posi] <- lm(sformula, data = md)$coefficients[colnames(md)[j]]
posj <- posj + 1
}
posi <- posi + 1
posj <- 1
}
skrrrahh(16)
corrplot(bCoeffs, method = 'color', tl.pos = 'n', order = 'hclust', hclust.method = 'ward.D2', col = rev(colorRampPalette(col2)(200)))
ggplot(data = bcoeffs) +
geom_tile(aes(fill = rescale), +colour = "white") +
scale_fill_gradient(low = "white", + high = "steelblue")
ggplot(data = bcoeffs) +
geom_tile(aes(fill = rescale), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue")
ggplot(data = bCoeffs) +
geom_tile(aes(fill = rescale), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue")
ggplot(data = as.data.frame(bCoeffs)) +
geom_tile(aes(fill = rescale), colour = "white") +
scale_fill_gradient(low = "white", high = "steelblue")
?rescale
?heatmap
heatmap(bCoeffs, Rowv=NA, Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
?heatmap
heatmap(bCoeffs, Rowv= 'hclust', Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
heatmap(bCoeffs, Rowv= as.dendrogram(hclust(dist(bCoeffs))), Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
row.names(bCoeffs) <- colnames(md)[foodOnly]
heatmap(bCoeffs, Rowv= as.dendrogram(hclust(dist(bCoeffs))), Colv=NA, col = cm.colors(256), scale="column", margins=c(5,10))
?melt
bCoeffs.m <- melt(bCoeffs)
install.packages('reshape2')
install.packages("reshape2")
library(reshape2)
bCoeffs.m <- melt(bCoeffs)
bCoeffs.m <- ddply(bCoeffs.m, .(variable), transform, rescale = rescale(value))
?ddply
install.packages()
install.packages('plyr')
install.packages("plyr")
library(plyr)
trimMeat %>%
dplyr::mutate_at(columns_to_factor, as.factor)
trimMeat <- select(data, bu, NUT_AFAT, eggs, CHIX_SK, CHIX_NO, bacon, hotdog, eggspt, PROC_MTS, liver, hamb, SAND_BF, beef, tuna, DK_FISH, OTH_FISH, shrimp)
trimMeat <- dplyr::select(data, bu, NUT_AFAT, eggs, CHIX_SK, CHIX_NO, bacon, hotdog, eggspt, PROC_MTS, liver, hamb, SAND_BF, beef, tuna, DK_FISH, OTH_FISH, shrimp)
columns_to_factor <- c('bacon', 'hamb', 'bu')
trimMeat %>%
dplyr::mutate_at(columns_to_factor, as.factor)
detach("package:plyr", unload=TRUE)
md <- mutate(md, SEX = replace(SEX, which(md$SEX == 2), 0))
?princomp
?grep
